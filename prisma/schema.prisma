datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          UserRole
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Season {
  id         String       @id @default(cuid())
  year       Int          @unique
  startDate  DateTime
  endDate    DateTime
  tournaments Tournament[]
}

model Tournament {
  id              String            @id @default(cuid())
  name            String
  startDate       DateTime
  endDate         DateTime
  location        String
  venue           String
  category        TournamentCategory
  totalPrizeMoney Decimal           @db.Decimal(10, 2)
  season          Season            @relation(fields: [seasonId], references: [id])
  seasonId        String
  events          Event[]
}

model Event {
  id           String     @id @default(cuid())
  name         EventType
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId String
  matches      Match[]
  entries      Entry[]
}

model Player {
  id            String       @id @default(cuid())
  bwfId         String       @unique
  firstName     String
  lastName      String
  dateOfBirth   DateTime
  country       String
  gender        Gender
  handedness    Handedness   @default(RIGHT)
  height        Int?         // in cm
  playingStatus PlayerStatus @default(ACTIVE)
  entries       Entry[]
  statistics    PlayerStats?
  matchStats    MatchPlayerStats[]
}

model PlayerStats {
  id                String @id @default(cuid())
  player            Player @relation(fields: [playerId], references: [id])
  playerId          String @unique
  currentWorldRanking Int?
  highestWorldRanking Int?
  matchesPlayed     Int    @default(0)
  matchesWon        Int    @default(0)
  totalPoints       Int    @default(0)
}

model Entry {
  id        String   @id @default(cuid())
  event     Event    @relation(fields: [eventId], references: [id])
  eventId   String
  players   Player[]
  seeding   Int?
  status    EntryStatus @default(CONFIRMED)
}

model Match {
  id              String            @id @default(cuid())
  event           Event             @relation(fields: [eventId], references: [id])
  eventId         String
  round           Round
  courtNumber     Int?
  status          MatchStatus       @default(SCHEDULED)
  scheduledTime   DateTime
  actualStartTime DateTime?
  endTime         DateTime?
  winner          String?
  umpire          String?
  serviceJudge    String?
  sets            Set[]
  playerStats     MatchPlayerStats[]
  matchReport     MatchReport?
}

model Set {
  id         String  @id @default(cuid())
  match      Match   @relation(fields: [matchId], references: [id])
  matchId    String
  setNumber  Int
  team1Score Int
  team2Score Int
  duration   Int?    // Duration in seconds
  rallies    Rally[]
}

model Rally {
  id              String    @id @default(cuid())
  set             Set       @relation(fields: [setId], references: [id])
  setId           String
  rallyNumber     Int
  servingPlayerId String
  winningPlayerId String
  scoringShot     ShotType?
  duration        Int?      // Duration in seconds
  returningPlayerId String
}

model MatchPlayerStats {
  id           String  @id @default(cuid())
  match        Match   @relation(fields: [matchId], references: [id])
  matchId      String
  player       Player  @relation(fields: [playerId], references: [id])
  playerId     String
  pointsScored Int
  smashes      Int
  drops        Int
  netShots     Int
  errors       Int
  servingScore Int
  receivingScore Int

  @@unique([matchId, playerId])
}

model MatchReport {
  id                String @id @default(cuid())
  match             Match  @relation(fields: [matchId], references: [id])
  matchId           String @unique
  highlights        String @db.Text
  keyTurningPoints  String @db.Text
  playerPerformance String @db.Text
}

enum UserRole {
  ADMIN
  OFFICIAL
  COACH
  VIEWER
}

enum TournamentCategory {
  SUPER_1000
  SUPER_750
  SUPER_500
  SUPER_300
  SUPER_100
  WORLD_TOUR_FINALS
  WORLD_CHAMPIONSHIPS
  OLYMPIC_GAMES
  CONTINENTAL_CHAMPIONSHIPS
  OTHER
}

enum EventType {
  MENS_SINGLES
  WOMENS_SINGLES
  MENS_DOUBLES
  WOMENS_DOUBLES
  MIXED_DOUBLES
}

enum PlayerStatus {
  ACTIVE
  INJURED
  RETIRED
  SUSPENDED
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum Handedness {
  RIGHT
  LEFT
}

enum EntryStatus {
  CONFIRMED
  WAITLISTED
  WITHDRAWN
}

enum MatchStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  WALKOVER
  RETIRED
  CANCELLED
}

enum Round {
  QUALIFICATION
  ROUND_OF_64
  ROUND_OF_32
  ROUND_OF_16
  QUARTER_FINAL
  SEMI_FINAL
  FINAL
}

enum ShotType {
  SMASH
  DROP
  CLEAR
  DRIVE
  NET_SHOT
  SERVE
  LOB
  SLICE
}