datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(VIEWER)
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Tournament {
  id              String    @id @default(cuid())
  name            String
  startDate       DateTime
  endDate         DateTime
  location        String
  description     String?   @db.Text
  category        TournamentCategory
  matches         Match[]
  eventCategories EventCategory[]
}

model EventCategory {
  id           String     @id @default(cuid())
  name         String
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId String
  matches      Match[]
}

model Player {
  id             String           @id @default(cuid())
  firstName      String
  lastName       String
  dateOfBirth    DateTime
  country        String
  ranking        Int?
  status         PlayerStatus?     @default(ACTIVE)
  singleMatches  Match[]          @relation("SinglesPlayer")
  // doubleMatches  DoublesPairing[]
  statistics     PlayerStats?

  // DoublesPairing DoublesPairing[] @relation(name: "DoublesPairingPlayer1")

  // DoublesPairing DoublesPairing[] @relation(name: "DoublesPairingPlayer2")
}

model PlayerStats {
  id            String  @id @default(cuid())
  player        Player  @relation(fields: [playerId], references: [id])
  playerId      String  @unique
  matchesPlayed Int     @default(0)
  matchesWon    Int     @default(0)
  totalPoints   Int     @default(0)
}

model DoublesPairing {
  id        String   @id @default(cuid())
  player1Id String
  player2Id String
  matches   Match[]

  // player1 Player @relation(fields: [player1Id], references: [id], name: "DoublesPairingPlayer1")
  // player2 Player @relation(fields: [player2Id], references: [id], name: "DoublesPairingPlayer2")

  @@unique([player1Id, player2Id])
}

model Match {
  id              String        @id @default(cuid())
  tournament      Tournament    @relation(fields: [tournamentId], references: [id])
  tournamentId    String
  eventCategory   EventCategory @relation(fields: [eventCategoryId], references: [id])
  eventCategoryId String
  singlesPlayers  Player[]      @relation("SinglesPlayer")
  doublesPairings DoublesPairing[]
  round           String
  status          MatchStatus   @default(SCHEDULED)
  scheduledTime   DateTime
  actualStartTime DateTime?
  endTime         DateTime?
  winner          String?
  court           String?
  sets            Set[]
  liveScore       LiveScore?
}

model Set {
  id          String   @id @default(cuid())
  match       Match    @relation(fields: [matchId], references: [id])
  matchId     String
  setNumber   Int
  team1Score  Int
  team2Score  Int
  winner      String?
  rallies     Rally[]
}

model Rally {
  id            String    @id @default(cuid())
  set           Set       @relation(fields: [setId], references: [id])
  setId         String
  rallyNumber   Int
  servingTeam   String
  winningTeam   String
  scoringShot   ShotType?
  duration      Int?      // Duration in seconds
}

model LiveScore {
  id            String   @id @default(cuid())
  match         Match    @relation(fields: [matchId], references: [id])
  matchId       String   @unique
  currentSet    Int
  team1Score    Int
  team2Score    Int
  servingTeam   String
  lastUpdated   DateTime @updatedAt
}

enum UserRole {
  ADMIN
  VIEWER
}

enum PlayerStatus {
  ACTIVE
  INJURED
  DISQUALIFIED
  WITHDRAWN
}

enum MatchStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  POSTPONED
}

enum TournamentCategory {
  BWF_WORLD_TOUR_SUPER_1000
  BWF_WORLD_TOUR_SUPER_750
  BWF_WORLD_TOUR_SUPER_500
  BWF_WORLD_TOUR_SUPER_300
  BWF_TOUR_SUPER_100
  OLYMPIC_GAMES
  BWF_WORLD_CHAMPIONSHIPS
  CONTINENTAL_CHAMPIONSHIPS
  NATIONAL_CHAMPIONSHIPS
  OTHER
}

enum ShotType {
  SMASH
  DROP
  CLEAR
  DRIVE
  NET_SHOT
  SERVE
  RETURN
  OTHER
}
